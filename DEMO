//listgenerator.cs

﻿using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Demo
{
    internal static class ListGenerator
    {
        public static List<Product> ProductList { get; set; }

        public static List<Customer> CustomerList { get; set; }

        static ListGenerator()
        {
            ProductList = new List<Product>()
            {
              new Product02(){SerialNumber=1212113 },
              new Product() {ProductId = 1, ProductName = "Chai", Category = "Beverages",
                    UnitPrice = 18.00M, UnitsInStock = 100},
              new Product{ ProductId = 2, ProductName = "Chang", Category = "Beverages",
                UnitPrice = 19.0000M, UnitsInStock = 17 },
              new Product{ ProductId = 3, ProductName = "Aniseed Syrup", Category = "Condiments",
                UnitPrice = 10.0000M, UnitsInStock = 13 },
              new Product{ ProductId = 4, ProductName = "Chef Anton's Cajun Seasoning", Category = "Condiments",
                UnitPrice = 22.0000M, UnitsInStock = 53 },
              new Product{ ProductId = 5, ProductName = "Chef Anton's Gumbo Mix", Category = "Condiments",
                UnitPrice = 21.3500M, UnitsInStock = 0 },
              new Product{ ProductId = 6, ProductName = "Grandma's Boysenberry Spread", Category = "Condiments",
                UnitPrice = 25.0000M, UnitsInStock = 120 },
              new Product{ ProductId = 7, ProductName = "Uncle Bob's Organic Dried Pears", Category = "Produce",
                UnitPrice = 30.0000M, UnitsInStock = 15 },
              new Product{ ProductId = 8, ProductName = "Northwoods Cranberry Sauce", Category = "Condiments",
                UnitPrice = 40.0000M, UnitsInStock = 6 },
              new Product{ ProductId = 9, ProductName = "Mishi Kobe Niku", Category = "Meat/Poultry",
                UnitPrice = 97.0000M, UnitsInStock = 29 },
              new Product{ ProductId = 10, ProductName = "Ikura", Category = "Seafood",
                UnitPrice = 31.0000M, UnitsInStock = 31 },
              new Product{ ProductId = 11, ProductName = "Queso Cabrales", Category = "Dairy Products",
                UnitPrice = 21.0000M, UnitsInStock = 22 },
              new Product{ ProductId = 12, ProductName = "Queso Manchego La Pastora", Category = "Dairy Products",
                UnitPrice = 38.0000M, UnitsInStock = 86 },
              new Product() { ProductId = 13, ProductName = "Konbu", Category = "Seafood",
                UnitPrice = 6.0000M, UnitsInStock = 24 },
              new Product() { ProductId = 14, ProductName = "Tofu", Category = "Produce",
                UnitPrice = 23.2500M, UnitsInStock = 35 },
              new Product() { ProductId = 15, ProductName = "Genen Shouyu", Category = "Condiments",
                UnitPrice = 15.5000M, UnitsInStock = 39 },
              new Product() { ProductId = 16, ProductName = "Pavlova", Category = "Confections",
                UnitPrice = 17.4500M, UnitsInStock = 29 },
              new Product() { ProductId = 17, ProductName = "Alice Mutton", Category = "Meat/Poultry",
                UnitPrice = 39.0000M, UnitsInStock = 0 },
              new Product() { ProductId = 18, ProductName = "Carnarvon Tigers", Category = "Seafood",
                UnitPrice = 62.5000M, UnitsInStock = 42 },
              new Product() { ProductId = 19, ProductName = "Teatime Chocolate Biscuits", Category = "Confections",
                UnitPrice = 9.2000M, UnitsInStock = 25 },
              new Product() { ProductId = 20, ProductName = "Sir Rodney's Marmalade", Category = "Confections",
                UnitPrice = 81.0000M, UnitsInStock = 40 },
              new Product() { ProductId = 21, ProductName = "Sir Rodney's Scones", Category = "Confections",
                UnitPrice = 10.0000M, UnitsInStock = 3 },
              new Product() { ProductId = 22, ProductName = "Gustaf's Knäckebröd", Category = "Grains/Cereals",
                UnitPrice = 21.0000M, UnitsInStock = 104 },
              new Product() { ProductId = 23, ProductName = "Tunnbröd", Category = "Grains/Cereals",
                UnitPrice = 9.0000M, UnitsInStock = 61 },
              new Product() { ProductId = 24, ProductName = "Guaraná Fantástica", Category = "Beverages",
                UnitPrice = 4.5000M, UnitsInStock = 20 },
              new Product() { ProductId = 25, ProductName = "NuNuCa Nuß-Nougat-Creme", Category = "Confections",
                UnitPrice = 14.0000M, UnitsInStock = 76 },
              new Product() { ProductId = 26, ProductName = "Gumbär Gummibärchen", Category = "Confections",
                UnitPrice = 31.2300M, UnitsInStock = 15 },
              new Product() { ProductId = 27, ProductName = "Schoggi Schokolade", Category = "Confections",
                UnitPrice = 43.9000M, UnitsInStock = 49 },
              new Product() { ProductId = 28, ProductName = "Rössle Sauerkraut", Category = "Produce",
                UnitPrice = 45.6000M, UnitsInStock = 26 },
              new Product() { ProductId = 29, ProductName = "Thüringer Rostbratwurst", Category = "Meat/Poultry",
                UnitPrice = 123.7900M, UnitsInStock = 0 },
              new Product() { ProductId = 30, ProductName = "Nord-Ost Matjeshering", Category = "Seafood",
                UnitPrice = 25.8900M, UnitsInStock = 10 },
              new Product() { ProductId = 31, ProductName = "Gorgonzola Telino", Category = "Dairy Products",
                UnitPrice = 12.5000M, UnitsInStock = 0 },
              new Product() { ProductId = 32, ProductName = "Mascarpone Fabioli", Category = "Dairy Products",
                UnitPrice = 32.0000M, UnitsInStock = 9 },
              new Product() { ProductId = 33, ProductName = "Geitost", Category = "Dairy Products",
                UnitPrice = 2.5000M, UnitsInStock = 112 },
              new Product() { ProductId = 34, ProductName = "Sasquatch Ale", Category = "Beverages",
                UnitPrice = 14.0000M, UnitsInStock = 111 },
              new Product() { ProductId = 35, ProductName = "Steeleye Stout", Category = "Beverages",
                UnitPrice = 18.0000M, UnitsInStock = 20 },
              new Product() { ProductId = 36, ProductName = "Inlagd Sill", Category = "Seafood",
                UnitPrice = 19.0000M, UnitsInStock = 112 },
              new Product() { ProductId = 37, ProductName = "Gravad lax", Category = "Seafood",
                UnitPrice = 26.0000M, UnitsInStock = 11 },
              new Product() { ProductId = 38, ProductName = "Côte de Blaye", Category = "Beverages",
                UnitPrice = 263.5000M, UnitsInStock = 17 },
              new Product() { ProductId = 39, ProductName = "Chartreuse verte", Category = "Beverages",
                UnitPrice = 18.0000M, UnitsInStock = 69 },
              new Product() { ProductId = 40, ProductName = "Boston Crab Meat", Category = "Seafood",
                UnitPrice = 18.4000M, UnitsInStock = 123 },
              new Product() { ProductId = 41, ProductName = "Jack's New England Clam Chowder", Category = "Seafood",
                UnitPrice = 9.6500M, UnitsInStock = 85 },
              new Product() { ProductId = 42, ProductName = "Singaporean Hokkien Fried Mee", Category = "Grains/Cereals",
                UnitPrice = 14.0000M, UnitsInStock = 26 },
              new Product() { ProductId = 43, ProductName = "Ipoh Coffee", Category = "Beverages",
                UnitPrice = 46.0000M, UnitsInStock = 17 },
              new Product() { ProductId = 44, ProductName = "Gula Malacca", Category = "Condiments",
                UnitPrice = 19.4500M, UnitsInStock = 27 },
              new Product() { ProductId = 45, ProductName = "Rogede sild", Category = "Seafood",
                UnitPrice = 9.5000M, UnitsInStock = 5 },
              new Product() { ProductId = 46, ProductName = "Spegesild", Category = "Seafood",
                UnitPrice = 12.0000M, UnitsInStock = 95 },
              new Product() { ProductId = 47, ProductName = "Zaanse koeken", Category = "Confections",
                UnitPrice = 9.5000M, UnitsInStock = 36 },
              new Product() { ProductId = 48, ProductName = "Chocolade", Category = "Confections",
                UnitPrice = 12.7500M, UnitsInStock = 15 },
              new Product() { ProductId = 49, ProductName = "Maxilaku", Category = "Confections",
                UnitPrice = 20.0000M, UnitsInStock = 10 },
              new Product() { ProductId = 50, ProductName = "Valkoinen suklaa", Category = "Confections",
                UnitPrice = 16.2500M, UnitsInStock = 65 },
              new Product() { ProductId = 51, ProductName = "Manjimup Dried Apples", Category = "Produce",
                UnitPrice = 53.0000M, UnitsInStock = 20 },
              new Product() { ProductId = 52, ProductName = "Filo Mix", Category = "Grains/Cereals",
                UnitPrice = 7.0000M, UnitsInStock = 38 },
              new Product() { ProductId = 53, ProductName = "Perth Pasties", Category = "Meat/Poultry",
                UnitPrice = 32.8000M, UnitsInStock = 0 },
              new Product() { ProductId = 54, ProductName = "Tourtière", Category = "Meat/Poultry",
                UnitPrice = 7.4500M, UnitsInStock = 21 },
              new Product() { ProductId = 55, ProductName = "Pâté chinois", Category = "Meat/Poultry",
                UnitPrice = 24.0000M, UnitsInStock = 115 },
              new Product() { ProductId = 56, ProductName = "Gnocchi di nonna Alice", Category = "Grains/Cereals",
                UnitPrice = 38.0000M, UnitsInStock = 21 },
              new Product() { ProductId = 57, ProductName = "Ravioli Angelo", Category = "Grains/Cereals",
                UnitPrice = 19.5000M, UnitsInStock = 36 },
              new Product() { ProductId = 58, ProductName = "Escargots de Bourgogne", Category = "Seafood",
                UnitPrice = 13.2500M, UnitsInStock = 62 },
              new Product() { ProductId = 59, ProductName = "Raclette Courdavault", Category = "Dairy Products",
                UnitPrice = 55.0000M, UnitsInStock = 79 },
              new Product() { ProductId = 60, ProductName = "Camembert Pierrot", Category = "Dairy Products",
                UnitPrice = 34.0000M, UnitsInStock = 19 },
              new Product() { ProductId = 61, ProductName = "Sirop d'érable", Category = "Condiments",
                UnitPrice = 28.5000M, UnitsInStock = 113 },
              new Product() { ProductId = 62, ProductName = "Tarte au sucre", Category = "Confections",
                UnitPrice = 49.3000M, UnitsInStock = 17 },
              new Product() { ProductId = 63, ProductName = "Vegie-spread", Category = "Condiments",
                UnitPrice = 43.9000M, UnitsInStock = 24 },
              new Product() { ProductId = 64, ProductName = "Wimmers gute Semmelknödel", Category = "Grains/Cereals",
                UnitPrice = 33.2500M, UnitsInStock = 22 },
              new Product() { ProductId = 65, ProductName = "Louisiana Fiery Hot Pepper Sauce", Category = "Condiments",
                UnitPrice = 21.0500M, UnitsInStock = 76 },
              new Product() { ProductId = 66, ProductName = "Louisiana Hot Spiced Okra", Category = "Condiments",
                UnitPrice = 17.0000M, UnitsInStock = 4 },
              new Product() { ProductId = 67, ProductName = "Laughing Lumberjack Lager", Category = "Beverages",
                UnitPrice = 14.0000M, UnitsInStock = 52 },
              new Product() { ProductId = 68, ProductName = "Scottish Longbreads", Category = "Confections",
                UnitPrice = 12.5000M, UnitsInStock = 6 },
              new Product() { ProductId = 69, ProductName = "Gudbrandsdalsost", Category = "Dairy Products",
                UnitPrice = 36.0000M, UnitsInStock = 26 },
              new Product() { ProductId = 70, ProductName = "Outback Lager", Category = "Beverages",
                UnitPrice = 15.0000M, UnitsInStock = 15 },
              new Product() { ProductId = 71, ProductName = "Flotemysost", Category = "Dairy Products",
                UnitPrice = 21.5000M, UnitsInStock = 26 },
              new Product() { ProductId = 72, ProductName = "Mozzarella di Giovanni", Category = "Dairy Products",
                UnitPrice = 34.8000M, UnitsInStock = 14 },
              new Product() { ProductId = 73, ProductName = "Röd Kaviar", Category = "Seafood",
                UnitPrice = 15.0000M, UnitsInStock = 101 },
              new Product() { ProductId = 74, ProductName = "Longlife Tofu", Category = "Produce",
                UnitPrice = 10.0000M, UnitsInStock = 4 },
              new Product() { ProductId = 75, ProductName = "Rhönbräu Klosterbier", Category = "Beverages",
                UnitPrice = 7.7500M, UnitsInStock = 125 },
              new Product() { ProductId = 76, ProductName = "Lakkalikööri", Category = "Beverages",
                UnitPrice = 18.0000M, UnitsInStock = 57 },
              new Product() { ProductId = 77, ProductName = "Original Frankfurter grüne Soße", Category = "Condiments",
                UnitPrice = 13.0000M, UnitsInStock = 32 }

            };

            /*("Customers.xml") lw h7to gwa el bin 8er Kda Aktb el path Bta3o*/

            CustomerList = (from e in XDocument.Load("Customers.xml").Root?.Elements("customer")
                            select new Customer()
                            {
                                CustomerId = (string?)e.Element("id") ?? string.Empty,
                                CustomerName = (string?)e.Element("name") ?? string.Empty,
                                Address = (string?)e.Element("address") ?? string.Empty,
                                City = (string?)e.Element("city") ?? string.Empty,
                                Region = (string?)e.Element("region") ?? string.Empty,
                                PostalCode = (string?)e.Element("postalcode") ?? string.Empty,
                                Country = (string?)e.Element("country") ?? string.Empty,
                                Phone = (string?)e.Element("phone") ?? string.Empty,
                                Fax = (string?)e.Element("fax") ?? string.Empty,
                                Orders = (
                                       from o in e.Elements("orders").Elements("order")
                                       select new Order
                                       {
                                           OrderId = (int?)o.Element("id") ?? default,
                                           OrderDate = (DateTime?)o.Element("orderdate") ?? default,
                                           Total = (decimal?)o.Element("total") ?? default,
                                       }).ToArray()
                            }).ToList();

        }
    }


    internal class Product : IComparable<Product>,IEquatable<Product>
    {

        public long ProductId { get; set; }
        public string? ProductName { get; set; }
        public string? Category { get; set; }
        public decimal UnitPrice { get; set; }
        public int UnitsInStock { get; set; }

        public int CompareTo(Product? other)
        {
            return this.UnitPrice.CompareTo(other?.UnitPrice);
        }

        public  bool Equals(Product? other)
        {
            if (other is null) return false;
            return this.ProductId == other.ProductId &&
                this.ProductName == other.ProductName &&
                this.Category == other.Category &&
                this.UnitPrice == other.UnitPrice &&
                this.UnitsInStock == other.UnitsInStock;
        }

        public override int GetHashCode()
         => HashCode.Combine(this.ProductId, this.ProductName, this.Category, this.UnitPrice, this.UnitsInStock);
            
        public override string ToString()
            => $"ProductID : {ProductId} , ProductName : {ProductName} , Category{Category} , UnitPrice : {UnitPrice} , UnitsInStock : {UnitsInStock}";

    }

    internal class Product02 :Product
    {
        public int SerialNumber { get; set; }

        public override string ToString()
        {
            return $"SerialNumber = {SerialNumber}";
        }

    }
    internal class Customer
    {
        public string ?CustomerId { get; set; }
        public string ?CustomerName { get; set; }
        public string ?Address { get; set; }
        public string ?City { get; set; }
        public string ?Region { get; set; }
        public string ?PostalCode { get; set; }
        public string ?Country { get; set; }
        public string ?Phone { get; set; }
        public string ?Fax { get; set; }
        public Order[]? Orders { get; set; }
        public Customer(string customerID, string customerName)
        {
            CustomerId = customerID;
            CustomerName = customerName;
            Orders = new Order[10];
        }
        public Customer()
        {

        }
        public override string ToString()
            => $"{CustomerId}, {CustomerName}, {Address}, {City}, {Region}, {PostalCode}, {Country}, {Phone}, {Fax}";
    }
    internal class Order
    {
        public int OrderId { get; set; }
        public DateTime OrderDate { get; set; }
        public decimal Total { get; set; }

        public Order(int orderID, DateTime orderDate, decimal total)
        {
            OrderId = orderID;
            OrderDate = orderDate;
            Total = total;
        }
        public Order()
        {

        }

        public override string ToString()
            => $"Order Id: {OrderId}, Date: {OrderDate.ToShortDateString()}, Total: {Total}";
    }





//  program.cs


﻿using Demo;
using static Demo.ListGenerator;
namespace Linq01
{
    internal class Program
    {
        //Assigment  LINQ 01
        static void Main( )
        {
            #region LINQ - Restriction Operators

            #region 1. Find all products that are out of stock.
            //var Result = ProductList.Where(P => P.UnitsInStock == 0);
            #endregion

            #region 2. Find all products that are in stock and cost more than 3.00 per unit.
            //var Result = ProductList.Where(P => P.UnitsInStock > 0 && P.UnitPrice>3);

            #endregion

            #region 3. Returns digits whose name is shorter than their value.
            //string[] Arr = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
            //
            //var Result = Arr.Select((name, i) => new { name, i })
            //                .Where(x => x.name.Length < x.i)
            //                .Select(x => x.i);

            #endregion

            //foreach (var item in Result)
            //    Console.WriteLine(item);

            #endregion

            #region LINQ - Ordering Operators

            #region 1. Sort a list of products by name
            //var Result = ProductList.OrderBy(p => p.ProductName);
            #endregion

            #region 2. Uses a custom comparer to do a case-insensitive sort of the words in an array.
            //string[] Arr = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
            //var Result = Arr.Order();

            #endregion

            #region 3. Sort a list of products by units in stock from highest to lowest.
            //var Result = ProductList.OrderByDescending(p => p.UnitsInStock);

            #endregion

            #region 4. Sort a list of digits, first by length of their name, and then alphabetically by the name itself.
            //string[] Arr = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
            //var Result = Arr.OrderBy(p => p.Length).ThenBy(p => p);
            #endregion

            #region 5. Sort first by word length and then by a case-insensitive sort of the words in an array.
            //string[] Arr = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
            //var Result = Arr.OrderBy(p => p.Length).ThenBy(p=>p);
            #endregion

            #region 6. Sort a list of products, first by category, and then by unit price, from highest to lowest.
            //var Result = ProductList.OrderByDescending(p => p.Category).OrderByDescending(P => P.UnitPrice);
            #endregion

            #region 7. Sort first by word length and then by a case-insensitive descending sort of the words in an array.
            //string[] Arr = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
            //var Result = Arr.OrderByDescending( x => x.Length );

            #endregion

            #region 8. Create a list of all digits in the array whose second letter is 'i' that is reversed from the order in the original array.
            //string[] Arr = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
            //var Result = Arr.Where(n => n[1] == 'i').Reverse();

            #endregion

            //foreach (var item in Result)
            //  Console.WriteLine(item);
            #endregion

            #region LINQ – Transformation Operators

            #region 1. Return a sequence of just the names of a list of products.
            //var Result = from p in ProductList
            //             select p.ProductName;

            #endregion

            #region 2. Produce a sequence of the uppercase and lowercase versions of each word in the original array (Anonymous Types).
            //string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" };
            //var Result = words.Select(word => new
            //{
            //    Uppercase = word.ToUpper(),
            //    Lowercase = word.ToLower()
            //});
            #endregion

            #region 3. Produce a sequence containing some properties of Products, including UnitPrice which is renamed to Price in the resulting type.
            //var Result = from p in ProductList
            //             select new 
            //             { 
            //                 Price = p.UnitPrice
            //             };
            #endregion

            #region 4. Determine if the value of ints in an array match their position in the array.
            //int[] Arr = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
            //var Result = Arr.Select((num, index) => new
            //{
            //    Number = num,
            //    Found = num == index
            //});
            //
            //foreach (var item in Result)
            //{
            //    Console.WriteLine($"{item.Number}: {item.Found}");
            //}
            #endregion

            #region 5. Returns all pairs of numbers from both arrays such that the number from numbersA is less than the number from numbersB.
            //int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
            //int[] numbersB = { 1, 3, 5, 7, 8 };
            //
            //var Result = from a in numbersA
            //             from b in numbersB
            //             where a < b
            //             select (a, b);

            #endregion

            #region 6. Select all orders where the order total is less than 500.00.
            //var Result = CustomerList.SelectMany(order => order.Orders!).Where(order => order.Total < 500.00M);
            #endregion

            #region 7. Select all orders where the order was made in 1998 or later.
            //var Result = CustomerList.SelectMany(order => order.Orders!).Where(order => order.OrderDate.Year >= 1998);
            #endregion
            //foreach (var item in Result)
            //    Console.WriteLine(item);
            #endregion

            #region LINQ - Element Operators

            #region 1. Get first Product out of Stock 
            //var Result = ProductList.FirstOrDefault(p => p.UnitsInStock == 0);
            //Console.WriteLine(Result);
            #endregion

            #region 2. Return the first product whose Price > 1000, unless there is no match, in which case null is returned.
            //var Result = ProductList.FirstOrDefault(p => p.UnitPrice > 1000);
            //Console.WriteLine(Result != null ? Result.ProductName : "No product over 1000 :) ");

            #endregion

            #region 3. Retrieve the second number greater than 5 
            //int[] Arr = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
            //var Result = Arr.Where(x => x > 5).Skip(1).FirstOrDefault();
            //
            //Console.WriteLine(Result > 0 ? Result : "Nothing Greater Than 5 :)");

            #endregion


            #endregion
        }
    }
}
}
